1.Show the output for the following snippet.
<? php
$capital=67;
print(“Variable capital is $capital”);
print(“Variable CaPiTaL is $CaPiTaL”);
?>

output:
Variable capital is 67 Variable CaPiTal is


2)Create a PHP program to display the division table using for-loop.
1 2 3
1 1 0.5 0.33
2 2 1 0.66
3 3 1.5 1

code: <?php
echo "  1 2 3\n";
for ($i = 1; $i <= 3; $i++) {
    echo $i . " "; 
    for ($j = 1; $j <= 3; $j++) {
        $result = $i / $j;
        echo round($result, 2) . " ";
    }
    echo "\n";
}
?>
output: 
 1 2 3
1 1 0.5 0.33 
2 2 1 0.67 
3 3 1.5 1 

4. Predict the output of the following snippet:
<?php
$animal = “antelope”; $animal_heads = 1; $animal_legs = 4;
echo“The $animal has $animal_heads head(s).”;
echo“The $animal has $animal_legs leg(s).”;
?>php

output:The antelope has 1 head(s).The antelope has 4 leg(s).

5. You are building a website where users can calculate the total cost of their purchases.
Write a PHP program that takes the price and quantity of three items from the user and
calculates the subtotal, tax (10% of the subtotal),and the total cost (subtotal + tax).
Display the results to the user.

<?php
$price1 = 100;
$qty1   = 2;

$price2 = 50;
$qty2   = 3;

$price3 = 20;
$qty3   = 5;

$subtotal = ($price1 * $qty1) + ($price2 * $qty2) + ($price3 * $qty3);
$tax = $subtotal * 0.10;
$total = $subtotal + $tax;

echo "--- Purchase Summary ---\n";
echo "Subtotal: ₹" . number_format($subtotal, 2) . "\n";
echo "Tax (10%): ₹" . number_format($tax, 2) . "\n";
echo "Total Cost: ₹" . number_format($total, 2) . "\n";
?>

output:
--- Purchase Summary ---
Subtotal: ₹450.00
Tax (10%): ₹45.00
Total Cost: ₹495.00

8. A customer visits a shop to buy a soft drink; he has two options:
Drink A cost is Rs.25 and the size of the bottle is 11.
Drink B cost is Rs.23 and its size of the bottle is 9.
Which drink should he choose to save money? Solve this problem using function deal ()

<?php
function deal() {
  $costA = 25;
  $sizeA = 11;

  $costB = 23;
  $sizeB = 9;

  $valueA = $costA / $sizeA;
  $valueB = $costB / $sizeB;

  if ($valueA < $valueB) {
    echo "Drink A is a better deal.";
  } else {
    echo "Drink B is a better deal.";
  }
}

deal();
?>

output:Drink A is a better deal.


9. Predict the output of the following snippet:
$this = “this”; $that = “that”; $the_other = 2.2000000000;
print(“$this,$not_set,$that+$the_other”);

output:this,,that+2.2


10. Develop a program to check student grades based on marks using a loop.
<?php
$marks = [85, 72, 60, 48, 30];

for ($i = 0; $i < count($marks); $i++) {
    $mark = $marks[$i];

    echo "Student " . ($i + 1) . ": Marks = $mark, Grade = ";

    if ($mark >= 80) {
        echo "A";
    } elseif ($mark >= 60) {
        echo "B";
    } elseif ($mark >= 40) {
        echo "C";
    } else {
        echo "Fail<br>";
    }
}
?>

output:
Student 1: Marks = 85, Grade = A  
Student 2: Marks = 72, Grade = B  
Student 3: Marks = 60, Grade = B  
Student 4: Marks = 48, Grade = C  
Student 5: Marks = 30, Grade = Fail

11. Develop a PHP program to show days of the week using switch cases.
<?php
$dayNumber = 3; 

switch ($dayNumber) {
    case 1:
        echo "Sunday";
        break;
    case 2:
        echo "Monday";
        break;
    case 3:
        echo "Tuesday";
        break;
    case 4:
        echo "Wednesday";
        break;
    case 5:
        echo "Thursday";
        break;
    case 6:
        echo "Friday";
        break;
    case 7:
        echo "Saturday";
        break;
    default:
        echo "Invalid day number!";
}
?>
output: tuesday

12. Write a program to check student grade based on marks:
Conditions:
If marks are 75% or more, the grade will be First Class.
If marks between 60% to 74%, grade will be second class.
If marks between 40% to 59%, grade will be third class.
If marks are less than 40%, students will be Fail.

<?php
$marks = 68; 

echo "Marks: $marks";
echo "Grade: ";

if ($marks >= 75) {
    echo "First Class";
} elseif ($marks >= 60 && $marks < 75) {
    echo "Second Class";
} elseif ($marks >= 40 && $marks < 60) {
    echo "Third Class";
} else {
    echo "Fail";
}
?>

output: Marks: 68Grade: Second Class

15. Create a PHP program to compute the sum of the digits of a number.
<?php
$number = 1234; 
$sum = 0;
while ($number > 0) {
    $digit = $number % 10;  
    $sum += $digit;         
    $number = (int)($number / 10); 
}
echo "Sum of digits is: " . $sum;
?>

output:Sum of digits is: 10

16. Write a PHP function that takes two numbers as input and returns the sum of those
numbers. Display the result on the webpage, when a button is clicked.

<?php
function addNumbers($a, $b) {
    return $a + $b;
}

$num1 = 5;
$num2 = 10;

$sum = addNumbers($num1, $num2);
echo "Sum of $num1 and $num2 is: $sum";
?>

output:
Sum of 5 and 10 is: 15

17.Examine the various control structures in php and construct a bank transaction problem
with customers deposit and withdrawal of amount.
<?php
$balance = 1000; 

$action = "withdraw"; 
$amount = 500;       
if ($action == "deposit") {
    $balance += $amount;
    echo "Deposited: ₹$amount\n";
    echo "Current Balance: ₹$balance\n";
} elseif ($action == "withdraw") {
    if ($amount > $balance) {
        echo "Insufficient Balance!\n";
    } else {
        $balance -= $amount;
        echo "Withdrew: ₹$amount\n";
    }
    echo "Current Balance: ₹$balance\n";
} else {
    echo "Invalid action.\n";
}
?>

output:Withdrew: ₹500 Current Balance: ₹500

18. IsSet() function in PHP with example.
<?php
$name = "Dharani";

if (isset($name)) {
    echo "The variable 'name' is set and has a value.";
} else {
    echo "The variable 'name' is not set.";
}

unset($name); 

if (isset($name)) {
    echo "\nThe variable 'name' is set.";
} else {
    echo "\nThe variable 'name' is not set.";
}
?>

output:
The variable 'name' is set and has a value.
The variable 'name' is not set.

19. Examine a PHP function that accepts an array of numbers and returns the highest and
lowest values in that array. Display the results on the webpage.

<?php
function findHighLow($numbers) {
    $highest = max($numbers);
    $lowest = min($numbers);
    return array($highest, $lowest);
}

$numbers = array(10, 25, 3, 99, 56);

list($high, $low) = findHighLow($numbers);

echo "Numbers: " . implode(", ", $numbers) . "";
echo "Highest Value: $high ";
echo "Lowest Value: $low";
?>

output:
Numbers: 10, 25, 3, 99, 56Highest Value: 99 Lowest Value: 3

21. Construct a PHP function that checks if a given year is a leap year and returns true or
false accordingly.

<?php
function isLeapYear($year) {
    return ($year % 4 == 0 && $year % 100 != 0) || ($year % 400 == 0);
}

$year = 2024;

if (isLeapYear($year)) {
    echo "$year is a leap year.";
} else {
    echo "$year is not a leap year.";
}
?>

output:
2024 is a leap year.

22. Create a PHP script that counts the number of occurrences of a specific word in a given
string.

<?php
$text = "PHP is easy. PHP is powerful. I love PHP!";
$word = "PHP";

$count = substr_count($text, $word);

echo "The word '$word' appears $count times.";
?>

output:
The word 'PHP' appears 3 times.

23. Prioritize the use of GET and POST arguments in PHP with a real time example.

<?php
// Simulating GET and POST without a form
$_GET['color'] = "Blue";
$_POST['name'] = "Dharani";

echo "GET: Your favorite color is " . $_GET['color'] . "\n";
echo "POST: Hello, " . $_POST['name'] . "!";
?>

output:
GET: Your favorite color is Blue
POST: Hello, Dharani!
    
24. Write a PHP script to manipulate the strings with all the string functions.
<?php
$str = "  Hello World! Welcome to PHP.  ";

// Remove extra spaces
$trimmed = trim($str);

// Convert to lowercase and uppercase
$lower = strtolower($trimmed);
$upper = strtoupper($trimmed);

// String length
$length = strlen($trimmed);

// Word count
$wordCount = str_word_count($trimmed);

// Replace a word
$replaced = str_replace("World", "Friend", $trimmed);

// Reverse the string
$reversed = strrev($trimmed);

// Find position of a word
$pos = strpos($trimmed, "PHP");

// Substring
$sub = substr($trimmed, 6, 5);

// Display results neatly
echo "Original: '$str'\n";
echo "Trimmed: '$trimmed'\n";
echo "Lowercase: $lower\n";
echo "Uppercase: $upper\n";
echo "Length: $length\n";
echo "Word count: $wordCount\n";
echo "Replace: $replaced\n";
echo "Reversed: $reversed\n";
echo "Position of 'PHP': $pos\n";
echo "Substring: $sub\n";
?>

output:
Original: '  Hello World! Welcome to PHP.  '
Trimmed: 'Hello World! Welcome to PHP.'
Lowercase: hello world! welcome to php.
Uppercase: HELLO WORLD! WELCOME TO PHP.
Length: 28
Word count: 5
Replace: Hello Friend! Welcome to PHP.
Reversed: .PHP ot emocleW !dlroW olleH
Position of 'PHP': 24
Substring: World


25. Construct a PHP script to replace the first ‘the’ of the following string with ‘best’. Data:
“The Thing will come to you soon”

<?php
$text = "The Thing will come to you soon";
// Replace first occurrence of "The" (case-sensitive)
$result = preg_replace('/The/', 'Best', $text, 1);

echo $result;
?>

output:
Best Thing will come to you soon

27. Articulate the mathematical operators with suitable examples in PHP.

<?php
$a = 12;
$b = 5;

echo "a = $a, b = $b\n";
echo "Addition (+): " . ($a + $b) . "\n";
echo "Subtraction (-): " . ($a - $b) . "\n";
echo "Multiplication (*): " . ($a * $b) . "\n";
echo "Division (/): " . ($a / $b) . "\n";
echo "Modulus (%): " . ($a % $b) . "\n";
echo "Exponentiation (**): " . ($a ** $b) . "\n";
?>

output:

a = 12, b = 5
Addition (+): 17
Subtraction (-): 7
Multiplication (*): 60
Division (/): 2.4
Modulus (%): 2
Exponentiation (**): 248832

28. Consider three variables $a, $b, $c, apply var_dump() function to evaluate if the values
are equal or not.

<?php
$a = 10;
$b = 10;
$c = 20;

echo "a = $a, b = $b, c = $c";

echo "a == b: ";
var_dump($a == $b);

echo "a == c: ";
var_dump($a == $c);

echo "b == c: ";
var_dump($b == $c);
?>

output:
a = 10, b = 10, c = 20a == b: bool(true)
a == c: bool(false)
b == c: bool(false)


30. Develop a PHP script that generates a random password consisting of a combination of
letters, numbers, and special characters.
<?php
$chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()';
$password = '';

for ($i = 0; $i < 8; $i++) {
    $password .= $chars[rand(0, strlen($chars) - 1)];
}

echo "Random Password: " . $password;
?>

output:
Random Password: ^lwN@#ve






 ASSIGNMENT -2



31) Remove the first element from an array in PHP using array functions.
<?php
$fruits = array("Apple", "Banana", "Mango", "Orange");
array_shift($fruits);
print_r($fruits);
?>
OUTPUT:
Array
(
    [0] => Banana
    [1] => Mango
    [2] => Orange
)
32) Infer the result of the following PHP code?
A)<?php
$mail = "admin@example.com";
$mail = str_replace("a","@",$mail);
echo "Contact me at $mail.";
?>
OUTPUT:
Contact me at @dmin@ex@mple.com.
B)<?php
$names = array("alex", "jean", "emily", "jane");
$name = preg_grep("/^e/", $names);
print_r($name);
?>

OUTPUT:
Array
(
    [2] => emily
)

33) Construct a PHP code to create a multidimensional array representing a matrix and display the value in
the second row and third column.
<?php
$matrix = array(
    array(1, 2, 3),   
    array(4, 5, 6),     
    array(7, 8, 9)    
);
$value = $matrix[1][2];  
echo "The value in the second row and third column is: $value";
?>
OUTPUT:
The value in the second row and third column is: 6
34) Replace all occurrences of a specific word with another word in a string using regular expressions in PHP.
<?php
$text = "PHP is fun. Learning PHP can be very interesting. I love PHP!";
$search = "/\bPHP\b/";
$replace = "Java";
$result = preg_replace($search, $replace, $text);
echo "Original Text: $text<br>";
echo "Modified Text: $result";
?>
OUTPUT:
Original Text: PHP is fun. Learning PHP can be very interesting. I love PHP!<br>Modified Text: Java is fun. Learning Java can be very interesting. I love Java!

35) Write a PHP script using an array that checks if a string contains another string and displays the result.
<?php
$mainString = "PHP is a powerful scripting language for web development.";
$searchWords = array("PHP", "Java", "web", "python");
foreach ($searchWords as $word) {
    if (strpos($mainString, $word) !== false) {
        echo "The string contains '$word'.<br>";
    } else {
        echo "The string does NOT contain '$word'.<br>";
    }
}
?>
OUTPUT:
The string contains 'PHP'.<br>The string does NOT contain 'Java'.<br>The string contains 'web'.<br>The string does NOT contain 'python'.<br>
36) Create an array of fruits in PHP and display the third element.
<?php
$Vegetable= array("Apple", "Banana", "Carrot", "Orange", "Grapes");
echo "The odd one is : " . $Vegetable[2];
?>
OUTPUT:
The odd one is : Carrot
37) Explain Push and Pop in array functions.
PUSH:
<?php
$fruits = array("Apple", "Banana");
array_push($fruits, "Mango", "Orange");

print_r($fruits);
?>

OUTPUT:
Array
(
    [0] => Apple
    [1] => Banana
    [2] => Mango
    [3] => Orange
)
POP:
<?php
$fruits = array("Apple", "Banana", "Mango");
$lastFruit = array_pop($fruits);

echo "Removed: $lastFruit<br>";
print_r($fruits);
?>
OUTPUT:
Removed: Mango<br>Array
(
    [0] => Apple
    [1] => Banana
)
38)Interpret the steps to iterate over a PHP array using a while loop with an example
<?php
$fruits = array("Apple", "Banana", "Mango", "Orange");
$i = 0;
$length = count($fruits);
while ($i < $length) {
    echo "Fruit at index $i: " . $fruits[$i] . "<br>";
    $i++;
}
?>
OUTPUT:
Fruit at index 0: Apple<br>Fruit at index 1: Banana<br>Fruit at index 2: Mango<br>Fruit at index 3: Orange<br>

39) A school wants to automate the calculation of student grades. Design a system that allows teachers to input
student scores, calculates their grades, and generates a summary report. How would you utilize arrays and
array functions to store and process the student data effectively?
<?php
$students = array(
    "Alice" => 85,
    "Bob" => 72,
    "Charlie" => 90,
    "David" => 65,
    "Eva" => 50
);
function getGrade($score) {
    if ($score >= 90) return "A";
    elseif ($score >= 80) return "B";
    elseif ($score >= 70) return "C";
    elseif ($score >= 60) return "D";
    else return "F";
}
echo "<h3>Student Grade Report</h3>";
foreach ($students as $name => $score) {
    $grade = getGrade($score);
    echo "$name - Score: $score - Grade: $grade <br>";
}
$totalStudents = count($students);
$totalScore = array_sum($students);
$average = $totalScore / $totalStudents;
$highest = max($students);
$lowest = min($students);
$topper = array_keys($students, $highest);

echo "<h3>Summary</h3>";
echo "Total Students: $totalStudents <br>";
echo "Average Score: $average <br>";
echo "Highest Score: $highest (Topper: " . implode(", ", $topper) . ")<br>";
echo "Lowest Score: $lowest <br>";
?>
OUTPUT:
Student Grade Report
Alice - Score: 85 - Grade: B 
Bob - Score: 72 - Grade: C 
Charlie - Score: 90 - Grade: A 
David - Score: 65 - Grade: D 
Eva - Score: 50 - Grade: F 

Summary
Total Students: 5 
Average Score: 72.4 
Highest Score: 90 (Topper: Charlie)
Lowest Score: 50 


40) Write a PHP script to remove all characters from a string except a-z A-Z 0-9 or " " using an array.
<?php
$text = "Hello@123!! Welcome_to PHP#World 2025.";
$chars = str_split($text);

$filtered = array_filter($chars, function($ch) {
    return preg_match('/[a-zA-Z0-9 ]/', $ch);
});
$cleanString = implode("", $filtered);
echo "Original String: $text <br>";
echo "Cleaned String: $cleanString";
?>
OUTPUT:
Original String: Hello@123!! Welcome_to PHP#World 2025.
Cleaned String: Hello123 Welcometo PHPWorld 2025

41) How can you use regular expressions to extract all email addresses from a given string using an array in
PHP?
<?php
$text = "Contact us at support@example.com, sales@shop.org or admin123@test.co.in for details.";
$pattern = "/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-z]{2,}/";
preg_match_all($pattern, $text, $matches);
$emails = $matches[0];
echo "Extracted Email Addresses:<br>";
foreach ($emails as $email) {
    echo $email . "<br>";
}
?>
OUTPUT:
Extracted Email Addresses:
support@example.com
sales@shop.org
admin123@test.co.in

42) Write a PHP script to find the maximum and minimum marks from the following set of arrays

$marks1 = array(360,310,310,330,313,375,456,111,256);
$marks2 = array(350,340,356,330,321);
$marks3 = array(630,340,570,635,434,255,298);<?php

$marks1 = array(360,310,310,330,313,375,456,111,256);
$marks2 = array(350,340,356,330,321);
$marks3 = array(630,340,570,635,434,255,298);
$allMarks = array_merge($marks1, $marks2, $marks3);
$maxMark = max($allMarks);
$minMark = min($allMarks);
echo "Maximum Mark: $maxMark <br>";
echo "Minimum Mark: $minMark <br>";
?>
OUTPUT:
Maximum Mark: 635 <br>Minimum Mark: 111 <br>
43) Develop a regular expression pattern that validates a password based on the following criteria: at least 8
characters long, contains at least one uppercase letter, one lowercase letter, one digit, and one special
character.
<?php
$passwords = ["Test@123", "weakpass", "NoSpecial123", "StrongPass1$", "Short1!"];
$pattern = "/^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/";
foreach ($passwords as $pwd) {
    if (preg_match($pattern, $pwd)) {
        echo "Password '$pwd' is VALID <br>";
    } else {
        echo "Password '$pwd' is INVALID <br>";
    }
}     
?>
OUTPUT:
Password 'Test@123' is VALID <br>Password 'weakpass' is INVALID <br>Password 'NoSpecial123' is INVALID <br>Password 'StrongPass1$' is VALID <br>Password 'Short1!' is INVALID <br>

44) Develop a music playlist management system for a streaming service. The system should allow users to
create, modify, and organize playlists. How would you use arrays and array functions to store and
manipulate the song data and playlist information efficiently?
<?php
$songs = array("Shape of You", "Blinding Lights", "Believer", "Levitating");
$playlist = array();
array_push($playlist, $songs[0], $songs[2], $songs[3]);
echo "<h3>My Playlist</h3>";
foreach ($playlist as $song) {
    echo $song . "<br>";
}
$key = array_search("Believer", $playlist);
if ($key !== false) {
    unset($playlist[$key]);
}
echo "<h3>Summary</h3>";
echo "Total Songs: " . count($playlist);
?>
OUTPUT:
My Playlist
Shape of You
Believer
Levitating

Summary
Total Songs: 2

45) Write a PHP function to compare two multidimensional arrays and return the difference.
<?php
$array1 = array(
    array("id" => 1, "name" => "Alice"),
    array("id" => 2, "name" => "Bob"),
    array("id" => 3, "name" => "Charlie")
);

$array2 = array(
    array("id" => 1, "name" => "Alice"),
    array("id" => 2, "name" => "Bob"),
    array("id" => 3, "name" => "David")
);
$diff = array_udiff($array1, $array2, function($a, $b) {
    return ($a == $b) ? 0 : 1;
});
echo "<pre>";
print_r($diff);
echo "</pre>";
?>
OUTPUT:
Array
(
    [0] => Array
        (
            [id] => 1
            [name] => Alice
        )

    [2] => Array
        (
            [id] => 3
            [name] => Charlie
        )
)
46) Write a PHP program to find the index of a specific value in an array.
<?php
$fruits = array("apple", "banana", "cherry", "mango", "orange");
$search = "mango";
$index = array_search($search, $fruits);
if ($index !== false) {
    echo "The value '$search' is found at index: $index";
} else {
    echo "The value '$search' is not found in the array.";
}
?>
OUTPUT:
The value 'mango' is found at index: 3

47) Delete an element from the below array. And print the array elements in PHP. $x = array (1, 2, 3, 4, 5);
<?php
$x = [1, 2, 3, 4, 5];
unset($x[2]);
$x = array_values($x);
echo implode(' ', $x), PHP_EOL;

OUTPUT:
1 2 4 5 

48. Record number handling in PHP with suitable examples.

<?php
$students = ["Alex", "Brian", "Catherine", "David", "Emma"];
foreach ($students as $recordNo => $name) {
    echo "Record No: " . ($recordNo + 1) . " - Name: $name <br>";
}
?>
OUTPUT:
Record No: 1 - Name: Alex 
Record No: 2 - Name: Brian 
Record No: 3 - Name: Catherine 
Record No: 4 - Name: David 
Record No: 5 - Name: Emma 
49) A sports team wants to evaluate player performance based on various statistical metrics. Design a system
that utilizes numerical types and mathematical operators to calculate performance indices, averages, and
rankings. How would you handle large datasets and perform complex calculations efficiently?
<?php
// Player stats dataset (could come from DB)
$players = [
    ["name" => "Alice", "points" => 20, "assists" => 5, "rebounds" => 8],
    ["name" => "Bob",   "points" => 15, "assists" => 7, "rebounds" => 10],
    ["name" => "Charlie","points" => 25, "assists" => 4, "rebounds" => 6],
];
foreach ($players as &$player) {
    $player['index'] = ($player['points'] * 0.5) +
                       ($player['assists'] * 0.3) +
                       ($player['rebounds'] * 0.2);
}
usort($players, function($a, $b) {
    return $b['index'] <=> $a['index'];
});
$totalIndex = array_sum(array_column($players, 'index'));
$avgIndex   = $totalIndex / count($players);
echo "Average Performance Index: " . number_format($avgIndex, 2) . "\n\n";
foreach ($players as $rank => $player) {
    echo "Rank " . ($rank + 1) . ": {$player['name']} (Index: " . number_format($player['index'], 2) . ")\n";
}
?>
Output:
Average Performance Index: 13.20 Rank 1: Charlie (Index: 14.90) Rank 2: Alice (Index: 13.10) Rank 3: Bob (Index: 11.60) 

50) Construct a PHP script to lower-case and upper-case, all elements in an array.
<?php
$words = ["Apple", "BaNaNa", "Cherry", "MANGO"];
$lowercase = array_map('strtolower', $words);
$uppercase = array_map('strtoupper', $words);
echo "Original Array: " . implode(", ", $words) . "<br>";
echo "Lower-case Array: " . implode(", ", $lowercase) . "<br>";
echo "Upper-case Array: " . implode(", ", $uppercase);
?>
OUTPUT:
Original Array: Apple, BaNaNa, Cherry, MANGO
Lower-case Array: apple, banana, cherry, mango
Upper-case Array: APPLE, BANANA, CHERRY, MANGO

51) Differentiate between array_shift() and array_unshift() in PHP.
<?php
$fruits = ["apple", "banana", "cherry"];
$first = array_shift($fruits);
echo "Removed Element: $first\n";
print_r($fruits);
?>
<br>
<?php
$fruits = ["banana", "cherry"];
$count = array_unshift($fruits, "apple", "mango");

echo "New Array Size: $count\n";
print_r($fruits);
?>
OUTPUT:
Removed Element: apple Array ([0] => banana[1] => cherry ) 
 New Array Size: 4 Array ([0] => apple[1] => mango[2] => banana[3] => cherry ) 

52) Compare stack and queue operations using PHP with appropriate examples.
<?php
// Stack example
$stack = [];
array_push($stack, "A");
array_push($stack, "B");
array_push($stack, "C");

echo "Stack after pushes: ";
print_r($stack);
$last = array_pop($stack);
echo "Popped: $last\n";
echo "Stack after pop: ";
print_r($stack);
?>
<br>
<?php
$queue = [];
array_push($queue, "A");
array_push($queue, "B");
array_push($queue, "C");
echo "Queue after enqueues: ";
print_r($queue);
$first = array_shift($queue);
echo "Dequeued: $first\n";

echo "Queue after dequeue: ";
print_r($queue);
?>
OUTPUT:
Stack after pushes: Array ([0] => A[1] => B[2] => C ) Popped: C Stack after pop: Array ([0] => A[1] => B ) 
 Queue after enqueues: Array ([0] => A[1] => B[2] => C ) Dequeued: A Queue after dequeue: Array ([0] => B[1] => C ) 

53) Demonstrate the difference in behaviour of array_pop() and array_shift() using a numeric array.
<?php
$numbers = [10, 20, 30, 40, 50];

echo "Original Array: ";
print_r($numbers);
$last = array_pop($numbers);
echo "\nAfter array_pop():\n";
echo "Removed Element: $last\n";
print_r($numbers);
$numbers = [10, 20, 30, 40, 50];
$first = array_shift($numbers);
echo "\nAfter array_shift():\n";
echo "Removed Element: $first\n";
print_r($numbers);
?>
OUTPUT:
Original Array: Array ([0] => 10[1] => 20[2] => 30[3] => 40[4] => 50 ) 
After array_pop(): Removed Element: 50 Array ([0] => 10[1] => 20[2] => 30[3] => 40 ) 
After array_shift(): Removed Element: 10 Array ([0] => 20[1] => 30[2] => 40[3] => 50 ) 

54) Design a PHP program that simulates a ticket booking queue using built-in array functions.
<?php
$queue = [];
array_push($queue, "Alice");
array_push($queue, "Bob");
array_push($queue, "Charlie");
array_push($queue, "David");

echo "Initial Queue:\n";
print_r($queue);
$served = array_shift($queue);
echo "\nCustomer served: $served\n";

echo "Queue after serving one customer:\n";
print_r($queue);
array_push($queue, "Eve");
echo "\nAfter new customer joins:\n";
print_r($queue);

$served1 = array_shift($queue);
$served2 = array_shift($queue);
echo "\nCustomers served: $served1, $served2\n";

echo "Final Queue:\n";
print_r($queue);
?>
OUTPUT:
Initial Queue: Array ([0] => Alice[1] => Bob[2] => Charlie[3] => David ) 
Customer served: Alice Queue after serving one customer: Array ([0] => Bob[1] => Charlie[2] => David ) 
After new customer joins: Array ([0] => Bob[1] => Charlie[2] => David[3] => Eve ) 
Customers served: Bob, Charlie Final Queue: Array ([0] => David[1] => Eve ) 

55) Develop a PHP script that uses stack functions to reverse a string.
<?php
$string = "HELLO";
$chars = str_split($string);
$stack = [];
foreach ($chars as $ch) {
    array_push($stack, $ch);
}
$reversed = "";
while (!empty($stack)) {
    $reversed .= array_pop($stack);
}
echo "Original String: $string\n";
echo "Reversed String: $reversed\n";
?>
OUTPUT:
Original String: HELLO Reversed String: OLLEH 

56) What are all the Functions available to sort a PHP array?
<?php
$fruits = ["banana", "apple", "Mango", "cherry", "Apple"];
sort($fruits);
print_r($fruits);
asort($fruits);
print_r($fruits);
$assoc = ["d"=>3, "a"=>1, "c"=>2];
ksort($assoc);
print_r($assoc);
$files = ["file1.txt", "file10.txt", "file2.txt"];
natsort($files);
print_r($files);
?>
Output:
Array ([0] => Apple[1] => Mango[2] => apple[3] => banana[4] => cherry ) 
Array ([0] => Apple[1] => Mango[2] => apple[3] => banana[4] => cherry ) 
Array ([a] => 1[c] => 2[d] => 3 ) 
Array ([0] => file1.txt[2] => file2.txt[1] => file10.txt ) 

57) Outline the Regular Expression with appropriate examples. 
<?php
$text = "Alice and Bob went to New York";
preg_match_all("/\b[A-Z][a-zA-Z]*\b/", $text, $matches);
print_r($matches[0]);
?>
OUTPUT:
Array ([0] => Alice[1] => Bob[2] => New[3] => York ) 

58) Construct a PHP program to extract the mail addresses in the given
string using regular expression.
<?php
$text = "You can contact us at support@example.com, sales@myshop.org or admin123@test.co.in.";
$pattern = "/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-z]{2,6}/";
preg_match_all($pattern, $text, $matches);

echo "Extracted Email Addresses:\n";
print_r($matches[0]);
?>
OUTPUT:
Extracted Email Addresses: Array ([0] => support@example.com[1] => sales@myshop.org[2] => admin123@test.co.in ) 

59) Create a function that takes an array of numbers as input and returns the average value. 
<?php
function calculateAverage($numbers) {
    if (count($numbers) === 0) {
        return 0; // Avoid division by zero
    }
    $sum = array_sum($numbers);  
    $count = count($numbers);    
    return $sum / $count;        
}
$values = [10, 20, 30, 40, 50];
echo "The average is: " . calculateAverage($values);
?>
OUTPUT:
The average is: 30

60) Write a PHP function to search a specified value within the values of an associative array.
<?php
function searchValueInAssocArray($array, $searchValue) {
    $result = array_keys($array, $searchValue, true); 
    if (!empty($result)) {
        return $result; 
    } else {
        return null; 
    }
}
$students = [
    "101" => "Alice",
    "102" => "Bob",
    "103" => "Charlie",
    "104" => "Bob"
];
$search = "Bob";
$foundKeys = searchValueInAssocArray($students, $search);
if ($foundKeys !== null) {
    echo "Value '$search' found at keys: " . implode(", ", $foundKeys);
} else {
    echo "Value '$search' not found in the array.";
}
?>
OUTPUT:
Value 'Bob' found at keys: 102, 104
61) Recall the steps to delete an element from an array?
<?php
$x = [1, 2, 3, 4, 5];
unset($x[2]);  
print_r($x);
?>
OUTPUT:
Array ([0] => 1[1] => 2[3] => 4[4] => 5 ) 

62) Demonstrate a PHP script which rounds the following values with 1 decimal digit precision.
Sample values : 1.65 1.65 -1.54
<?php
$values = [1.65, 1.65, -1.54];
foreach ($values as $num) {
    echo "Original: $num → Rounded: " . round($num, 1) . "<br>";
}
?>
OUTPUT:
Original: 1.65 → Rounded: 1.7
Original: 1.65 → Rounded: 1.7
Original: -1.54 → Rounded: -1.5

63) Discover a function that takes an array of numbers as input and returns the sum of all the even numbers in
the array.
<?php
function sumEvenNumbers($arr) {
    $sum = 0;
    foreach ($arr as $num) {
        if ($num % 2 == 0) {   
            $sum += $num;
        }
    }
    return $sum;
}
$numbers = [1, 2, 3, 4, 5, 6, 7, 8];
echo "Sum of even numbers: " . sumEvenNumbers($numbers);
?>
output:
Sum of even numbers: 20

64) A retail company wants to forecast future sales based on historical data. Develop a system that utilizes
numerical types, mathematical operators to analyze sales trends, calculate growth rates, and generate
sales forecasts using arrays in php.
<?php
$sales = [1000, 1200, 1350, 1500, 1600, 1750, 1900];
$growthRates = [];
for ($i = 1; $i < count($sales); $i++) {
    $growth = (($sales[$i] - $sales[$i - 1]) / $sales[$i - 1]) * 100; // %
    $growthRates[] = $growth;
}
$averageGrowthRate = array_sum($growthRates) / count($growthRates);
$forecast = [];
$lastSale = end($sales);  // get last known sales
for ($i = 1; $i <= 3; $i++) {
    $lastSale = $lastSale * (1 + $averageGrowthRate / 100);
    $forecast[] = round($lastSale, 2);
}
echo "<h2>Sales Forecast System</h2>";
echo "<b>Historical Sales Data:</b> " . implode(", ", $sales) . "<br><br>";
echo "<b>Monthly Growth Rates (%):</b> " . implode(", ", array_map(fn($v) => round($v, 2), $growthRates)) . "<br>";
echo "<b>Average Growth Rate:</b> " . round($averageGrowthRate, 2) . "%<br><br>";

echo "<b>Forecasted Sales (Next 3 Months):</b> " . implode(", ", $forecast) . "<br>";
?>
OUTPUT:
Sales Forecast System
Historical Sales Data: 1000, 1200, 1350, 1500, 1600, 1750, 1900
Monthly Growth Rates (%): 20, 12.5, 11.11, 6.67, 9.38, 8.57
Average Growth Rate: 11.37%
Forecasted Sales (Next 3 Months): 2116.04, 2356.65, 2624.62
65) Demonstrate PHP script that checks if a string contains another string and displays the result.
<?php
$mainString = "Welcome to PHP programming!";
$search = "PHP";
if (strpos($mainString, $search) !== false) {
    echo "The string contains '$search'.<br>";
} else {
    echo "The string does not contain '$search'.<br>";
}
if (function_exists('str_contains')) {
    if (str_contains($mainString, $search)) {
        echo "(Using str_contains) The string contains '$search'.";
    } else {
        echo "(Using str_contains) The string does not contain '$search'.";
    }
}
?>
OUTPUT:
The string contains 'PHP'.
(Using str_contains) The string contains 'PHP'.

66) Difference between count() and sizeof() function in PHP.
<?php
$fruits = ["apple", "banana", "cherry"];
echo "Using count(): " . count($fruits) . "<br>";
echo "Using sizeof(): " . sizeof($fruits) . "<br>";
?>
OUTPUT:
Using count(): 3
Using sizeof(): 3

67) Construct a program that tokenizes a sentence into words using regular expressions. Then, count the
number of occurrences of each word and display the results.
<?php
$sentence = "PHP is great, and PHP is powerful. PHP is easy to learn!";
$words = preg_split("/\W+/", strtolower($sentence), -1, PREG_SPLIT_NO_EMPTY);
$wordCount = array_count_values($words);
echo "<h3>Word Frequency Count</h3>";
foreach ($wordCount as $word => $count) {
    echo "$word : $count <br>";
}
?>
OUTPUT:
Word Frequency Count
php : 3 
is : 3 
great : 1 
and : 1 
powerful : 1 
easy : 1 
to : 1 
learn : 1 

68) Construct a PHP script that catches a division by zero error using try-catch.
<?php
try {
    $numerator = 10;
    $denominator = 0;
     if ($denominator == 0) {
        throw new DivisionByZeroError("Cannot divide by zero!");
    }
    $result = $numerator / $denominator;
    echo "Result: $result";
    
} catch (DivisionByZeroError $e) {
    echo "Error: " . $e->getMessage();
}
?>
OUTPUT:
Error: Cannot divide by zero!

69) Build a PHP function to change the following array's all values to upper or lower case.

Sample arrays :
$Color = array('A' => 'Blue', 'B' => 'Green', 'c' => 'Red');
Expected Output :
Values are in lower case.
Array ( [A] => blue [B] => green [c] => red )
Values are in upper case.
Array ( [A] => BLUE [B] => GREEN [c] => RED )
<?php
$Color = array('A' => 'Blue', 'B' => 'Green', 'c' => 'Red');
function arrayToLower($arr) {
    return array_map('strtolower', $arr);
}
function arrayToUpper($arr) {
    return array_map('strtoupper', $arr);
}
echo "Values are in lower case.<br>";
print_r(arrayToLower($Color));
echo "<br><br>Values are in upper case.<br>";
print_r(arrayToUpper($Color));
?>

OUTPUT:
Values are in lower case.
Array ([A] => blue[B] => green[c] => red ) 

Values are in upper case.
Array ([A] => BLUE[B] => GREEN[c] => RED ) 
70) Create a PHP program to take input, a sequence of numbers from the user and store it in a list or array.
<html>
<head>
    <title>Number Sequence Input</title>
</head>
<body>
    <h2>Enter a sequence of numbers separated by commas</h2>
    <form method="post">
        <input type="text" name="numbers" placeholder="e.g. 1,2,3,4,5" required>
        <input type="submit" name="submit" value="Submit">
    </form>
<?php
    if (isset($_POST['submit'])) {
        $input = $_POST['numbers'];
        $numberArray = array_map('trim', explode(',', $input));
        $numberArray = array_map('intval', $numberArray);
        echo "<h3>Your number sequence as an array:</h3>";
        echo "<pre>";
        print_r($numberArray);
        echo "</pre>";
    }
    ?>
</body>
</html>




ASSIGNMENT-3
71. Tell the different file handling modes available in PHP?
<?php
$file = fopen("example.txt", "r"); // Read mode
$file_write = fopen("example.txt", "w"); // Write mode
$file_append = fopen("example.txt", "a"); // Append mode

echo "File handling modes in PHP are: \n";
echo "r = Read, w = Write, a = Append.";
?>
OUTPUT:
File handling modes in PHP are:
r = Read, w = Write, a = Append.

72. Write the PHP program to implement the following session functions. 
(i)session_register() (ii) session_unset() (iii) session_destroy() 

<?php
// (i) session_register() - Deprecated in PHP 5.4.0. Use $_SESSION instead.
session_start();
$_SESSION["user"] = "Dharani";

// (ii) session_unset() - Unsets all session variables
session_unset();

// (iii) session_destroy() - Destroys the session
session_destroy();

echo "Session functions executed.";
?>
OUTPUT:
Session functions executed.


73. Develop a PHP program to display an error message when a file other than jpg or png is uploaded. 
<?php
if(isset($_FILES['file'])){
    $fileType = pathinfo($_FILES['file']['name'], PATHINFO_EXTENSION);
    if($fileType != "jpg" && $fileType != "png"){
        echo "Error: Only JPG and PNG files are allowed.";
    } else {
        echo "File uploaded successfully.";
    }
}
?>

output:
Error: Only JPG and PNG files are allowed.

74. Outline the file reading and writing functions of PHP with suitable examples. 

<?php
// File Write
$file = fopen("testfile.txt", "w");
fwrite($file, "Hello, World!");
fclose($file);

// File Read
$file = fopen("testfile.txt", "r");
echo fread($file, filesize("testfile.txt"));
fclose($file);
?>
output:
Hello, World!

75. Build a PHP function that takes the filename and a new line of content as input. Append the new  line of content as a new line at the end of the file. 

<?php
function appendToFile($filename, $content){
    $file = fopen($filename, "a");
    fwrite($file, $content . "\n");
    fclose($file);
}

appendToFile("testfile.txt", "New content");
?>

76. Write a simple 'birthday countdown' script, the script will count the number of days between  current day and birthday. 

<?php
$birthday = "2025-12-31";
$currentDate = date("Y-m-d");

$diff = strtotime($birthday) - strtotime($currentDate);
$daysLeft = floor($diff / (60 * 60 * 24));

echo "Days left until birthday: " . $daysLeft;
?>
output:
Days left until birthday: 365

77. Classify the various network functions which provide network information or functions. 
<?php
echo "Network Functions in PHP:\n";
echo "gethostbyname() - Get the IP address of a host by name.\n";
echo "gethostbynamel() - Get all IP addresses of a host by name.\n";
?>
output:
Network Functions in PHP:
gethostbyname() - Get the IP address of a host by name.
gethostbynamel() - Get all IP addresses of a host by name.

78. Elucidate the steps to read and delete existing cookies in the browser. 

<?php
// Reading a cookie
if(isset($_COOKIE['user'])) {
    echo "User cookie: " . $_COOKIE['user'];
} else {
    echo "Cookie is not set.";
}

// Deleting a cookie
setcookie("user", "", time() - 3600);
echo "Cookie deleted.";
?>
output:
Cookie is not set.
Cookie deleted.

79. Create a PHP program to append two files in another file. 

<?php
$file1 = fopen("file1.txt", "r");
$file2 = fopen("file2.txt", "r");
$newFile = fopen("combined.txt", "a");

while($line = fgets($file1)){
    fwrite($newFile, $line);
}

while($line = fgets($file2)){
    fwrite($newFile, $line);
}

fclose($file1);
fclose($file2);
fclose($newFile);

echo "Files appended to combined.txt.";
?>
output:
Files appended to combined.txt.

80. Build a test cookie with the setcookie( ) function using PHP. 

<?php
setcookie("test_cookie", "cookie_value", time() + (86400 * 30), "/");

if(isset($_COOKIE["test_cookie"])) {
    echo "Cookie 'test_cookie' is set: " . $_COOKIE["test_cookie"];
} else {
    echo "Cookie 'test_cookie' is not set.";
}
?>
output:
Cookie 'test_cookie' is set: cookie_value

81. Create Admin Login, Logout form using session variables in PHP. 


<?php
// Admin login
session_start();
$_SESSION['admin'] = "Logged In";

echo "Admin login: " . $_SESSION['admin'];

// Admin logout
session_unset();
session_destroy();
echo "Admin logged out.";
?>
output:
Admin login: Logged In
Admin logged out.

82. Implement the setcookie( ) function with various arguments using the PHP program
<?php
setcookie("user", "Dharani", time() + (86400 * 30), "/", "example.com", true, true);

if(isset($_COOKIE["user"])) {
    echo "Cookie value: " . $_COOKIE["user"];
} else {
    echo "Cookie not set.";
}
?>
output:
Cookie value: Dharani

83. Develop a PHP script to accept email addresses and validate it. Display the domain name of the  email and result of validation.  

<?php
$email = "user@example.com";
if(filter_var($email, FILTER_VALIDATE_EMAIL)) {
    $domain = substr(strrchr($email, "@"), 1);
    echo "Valid email. Domain: " . $domain;
} else {
    echo "Invalid email.";
}
?>
output:
Valid email. Domain: example.com

84. Implement a PHP program that creates sessions, sets values in sessions, and removes data from  the sessions.  

<?php
session_start();
$_SESSION["name"] = "Dharani";
echo "Session variable is set: " . $_SESSION["name"];
?>
output:
Session variable is set: Dharani

85. List the steps to get file name from a path in PHP. 

<?php
$path = "/home/user/file.txt";
$fileName = basename($path);
echo "File name from path: " . $fileName;
?>

File name from path: file.txt
86. PHP File functions with example program. 
<?php
$file = fopen("sample.txt", "w");
fwrite($file, "Hello, PHP file functions!");
fclose($file);

$file = fopen("sample.txt", "r");
echo fread($file, filesize("sample.txt"));
fclose($file);
?>
output:
Hello, PHP file functions!

87. Create a PHP Admin Login, Logout form using session variables. 

<?php
session_start();
$_SESSION['admin'] = "Logged In";
echo "Admin login: " . $_SESSION['admin'];
session_unset();
session_destroy();
echo "Admin logged out.";
?>
output:

Admin login: Logged In
Admin logged out.

88. Generate a simple PHP 'birthday countdown' script, the script will count the number of days  between current day and birthday. 

<?php
$birthday = "2025-12-31";
$currentDate = date("Y-m-d");

$diff = strtotime($birthday) - strtotime($currentDate);
$daysLeft = floor($diff / (60 * 60 * 24));

echo "Days left until birthday: " . $daysLeft;
?>

output:
Days left until birthday: 365

89. Construct a PHP program to read a file using file operation. 

<?php
$file = fopen("testfile.txt", "r");
echo fread($file, filesize("testfile.txt"));
fclose($file);
?>

output:
Hello, World!
90. Write a PHP program to open a text file and print all the data in it. 


<?php
$file = fopen("testfile.txt", "r");
echo fread($file, filesize("testfile.txt"));
fclose($file);
?>
91. Recognize how sessions are stored in PHP? 

<?php
session_start();
$_SESSION['user'] = 'Dharani';
echo "Session is stored in PHP and ID: " . session_id();
?>
output:
Session is stored in PHP and ID: 1234567890abcdef

92. Apply the various steps involved to get cookie value using server-side scripting.

<?php
if(isset($_COOKIE["user"])) {
    echo "User cookie: " . $_COOKIE["user"];
} else {
    echo "Cookie not set.";
}
?>
output:
Cookie not set.

93. Write a PHP program that keeps track of how many times a visitor has loaded the page.
<?php
session_start();
if(isset($_SESSION['visit_count'])) {
    $_SESSION['visit_count']++;
} else {
    $_SESSION['visit_count'] = 1;
}

echo "You have visited this page " . $_SESSION['visit_count'] . " times.";
?>

output:
You have visited this page 1 times.

94. Evaluate the different file handling modes available in PHP with appropriate examples.

<?php
$file = fopen("testfile.txt", "r");
echo fread($file, filesize("testfile.txt"));
fclose($file);
?>

95. Discuss the purpose and functionality of PHP sessions and outline their potential application in
maintaining a user's shopping cart state across multiple pages.
<?php
session_start();
if(!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}
array_push($_SESSION['cart'], "Item1");

echo "Items in your cart: " . implode(", ", $_SESSION['cart']);
?>
output:
Items in your cart: Item1

96. How to register a variable in a PHP session? Give an example.
<?php
session_start();
$_SESSION['user'] = 'Dharani';
echo "User session is: " . $_SESSION['user'];
?>
output:

User session is: Dharani
97.the various session functions of PHP. Explain its behavior.

<?php
session_start();
$_SESSION['user'] = 'Dharani';
echo "User: " . $_SESSION['user'];
session_unset();
session_destroy();
?>
output:
User: Dharani

98. Model an Admin Login, Logout form using session variables in PHP.

<?php
session_start();
$_SESSION['admin'] = "Logged In";
echo "Admin login: " . $_SESSION['admin'];
session_unset();
session_destroy();
echo "Admin logged out.";
?>
output:
Admin login: Logged In
Admin logged out.

99. Build a PHP program to apply the following tasks using session.
(a) Initiate a session (or pick up an existing one).
(b) Check for the existence of a pre-existing entry in $_SESSION. If not present, assume
that the session is new.
(c) Increment a counter that tracks how many times that the user has visited this page.
(d) Store the incremented counter back in $_SESSION.
(e) Provide a link back to the page itself, embedding the session ID as an argument if it is
found.
(f) Using PHP, construct a program to restrict the user from uploading the same file again
and again. If the same file already exists in that folder, display an appropriate error
message.

<?php
session_start();
if(isset($_SESSION['page_view_count'])) {
    $_SESSION['page_view_count']++;
} else {
    $_SESSION['page_view_count'] = 1;
}

echo "Page view count: " . $_SESSION['page_view_count'];
?>
output:
Page view count: 1

100. Using PHP, construct a program to restrict the user from uploading the same file again and again.
If the same file already exists in that folder, display an appropriate error message.
<?php
$uploadDir = "uploads/";
$fileName = basename($_FILES["file"]["name"]);
$filePath = $uploadDir . $fileName;

if(file_exists($filePath)) {
    echo "Error: File already exists.";
} else {
    move_uploaded_file($_FILES["file"]["tmp_name"], $filePath);
    echo "File uploaded successfully.";
}
?>
output:
Error: File already exists.


101. Identify, how a cookie’s value can be retrieved in a web application?
<?php
if(isset($_COOKIE["user"])) {
    echo "User cookie: " . $_COOKIE["user"];
} else {
    echo "Cookie not set.";
}
?>
output:

Cookie not set.


102. Develop a PHP program to use session variables and start a session.


<?php
session_start();
$_SESSION["user"] = "Dharani";
echo "Session variable is: " . $_SESSION["user"];
?>

Session variable is: Dharani

Create a very simple pageview counter by using ‘isset’ to check if the pageview variable has
already been created.
<?php
session_start();
if(isset($_SESSION['page_views'])) {
    $_SESSION['page_views']++;
} else {
    $_SESSION['page_views'] = 1;
}

echo "Page views: " . $_SESSION['page_views'];
?>
output:
Page views: 1

104. Formulate a PHP program to open a text file and print the nth line in the text file if then'th line
does not exist print 'no data'.
<?php
$file = fopen("file.txt", "r");
$n = 3;
$lineNum = 1;

while(($line = fgets($file)) !== false) {
    if($lineNum == $n) {
        echo $line;
        break;
    }
    $lineNum++;
}

if($lineNum < $n) {
    echo "No data at line " . $n;
}

fclose($file);
?>
OUTPUT:

Line 3 content or "No data at line 3".

Write a PHP function to get the start and end date of a week (by week number) of a particular
year.
<?php
function getWeekDates($year, $week) {
    $timestamp = strtotime($year . "W" . str_pad($week, 2, "0", STR_PAD_LEFT));
    $start = date("Y-m-d", $timestamp);
    $end = date("Y-m-d", strtotime("+6 days", $timestamp));

    echo "Week $week of $year: Start - $start, End - $end";
}

getWeekDates(2025, 12);
?>

OUTPUT:
Week 12 of 2025: Start - 2025-03-18, End - 2025-03-24


SEMESTER PRACTICAL PROGRAMS

PROGRAM 3 control structures and loops

<!DOCTYPE html>
<html>
<head>
    <title>Inventory Management</title>
</head>
<body>

<h1>Simple Inventory Management</h1>

<?php
// Initial stock values
$stock = array(
    "Veg Biryani" => 10,
    "Chicken Biryani" => 8,
    "Ice Cream" => 15
);

// Manual operations
$action = "add";  // can be "add" or "remove"
$item = "Chicken Biryani";
$quantity = 3;

// Update stock using control structures
if (array_key_exists($item, $stock)) {
    if ($action == "add") {
        $stock[$item] += $quantity;
        echo "<p>Added $quantity $item(s) to stock.</p>";
    } elseif ($action == "remove") {
        if ($stock[$item] >= $quantity) {
            $stock[$item] -= $quantity;
            echo "<p>Removed $quantity $item(s) from stock.</p>";
        } else {
            echo "<p>Not enough $item in stock to remove.</p>";
        }
    } else {
        echo "<p>Invalid action.</p>";
    }
} else {
    echo "<p>Item not found in inventory.</p>";
}

// Display updated stock
echo "<h2>Updated Inventory</h2>";
foreach ($stock as $key => $value) {
    echo "<p>$key : $value items</p>";
}
?>

</body>
</html>
    


PROGRAM 4 string functions
<!DOCTYPE html>
<html>
<head>
    <title>PHP String Functions</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: #f0f8ff;
            margin: 40px;
        }
        h1 {
            text-align: center;
            color: darkblue;
        }
        .box {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 2px 2px 8px gray;
            width: 500px;
            margin: auto;
        }
        p {
            font-size: 18px;
        }
        span {
            color: darkred;
            font-weight: bold;
        }
    </style>
</head>
<body>

<h1>PHP String Functions Demo</h1>
<div class="box">
<?php
// Input string
$text = "Welcome to Hotel SBD";

// String functions
echo "<p>Original Text: <span>$text</span></p>";
echo "<p>Uppercase: <span>" . strtoupper($text) . "</span></p>";
echo "<p>Lowercase: <span>" . strtolower($text) . "</span></p>";
echo "<p>Length of Text: <span>" . strlen($text) . "</span></p>";
echo "<p>Reversed Text: <span>" . strrev($text) . "</span></p>";
echo "<p>Replace 'Hotel' with 'Restaurant': <span>" . str_replace("Hotel", "Restaurant", $text) . "</span></p>";
echo "<p>Substring (first 7 chars): <span>" . substr($text, 0, 7) . "</span></p>";
?>
</div>

</body>
</html>

Program 5 arrays and functions

<!DOCTYPE html>
<html>
<head>
    <title>Student Grade Calculator</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: #f9f9f9;
            margin: 40px;
        }
        h1 {
            text-align: center;
            color: darkgreen;
        }
        .card {
            width: 500px;
            margin: auto;
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 2px 2px 8px gray;
        }
        p {
            font-size: 18px;
        }
        span {
            font-weight: bold;
            color: darkred;
        }
    </style>
</head>
<body>

<h1>Student Grade Calculator</h1>
<div class="card">
<?php
// Array of student marks
$marks = array(
    "Maths" => 85,
    "Science" => 78,
    "English" => 92,
    "Computer" => 88,
    "History" => 74
);

// Function to calculate total
function calculateTotal($marks) {
    return array_sum($marks);
}

// Function to calculate average
function calculateAverage($marks) {
    return array_sum($marks) / count($marks);
}

// Function to assign grade
function assignGrade($average) {
    if ($average >= 90) return "A+";
    elseif ($average >= 80) return "A";
    elseif ($average >= 70) return "B";
    elseif ($average >= 60) return "C";
    else return "Fail";
}

// Calculate values
$total = calculateTotal($marks);
$average = calculateAverage($marks);
$grade = assignGrade($average);

// Display results
echo "<p><span>Marks Obtained:</span></p>";
foreach ($marks as $subject => $mark) {
    echo "<p>$subject : $mark</p>";
}

echo "<hr>";
echo "<p>Total Marks: <span>$total</span></p>";
echo "<p>Average Marks: <span>$average</span></p>";
echo "<p>Grade: <span>$grade</span></p>";
?>
</div>

</body>
</html>

 
Program 6 form handling
<!DOCTYPE html>
<html>
<head>
    <title>Simple Registration Form</title>
    <style>
        body { font-family: Arial; background: #f9f9f9; }
        h1 { text-align: center; color: darkblue; }
        .form-box {
            width: 300px; margin: auto; background: white; padding: 15px;
            border-radius: 8px; box-shadow: 1px 1px 6px gray;
        }
        input { width: 95%; padding: 8px; margin: 5px 0; }
        input[type=submit] {
            background: darkblue; color: white; border: none; cursor: pointer;
        }
        .error { color: red; }
    </style>
</head>
<body>

<h1>Registration Form</h1>
<div class="form-box">
<?php
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $name = $_POST["name"];
    $email = $_POST["email"];
    $password = $_POST["password"];

    if ($name == "" || $email == "" || $password == "") {
        echo "<p class='error'>All fields are required!</p>";
    } else {
        echo "<p><b>Registration Successful!</b></p>";
        echo "Name: $name <br>Email: $email";
    }
}
?>

<form method="post">
    Name: <br>
    <input type="text" name="name"><br>
    Email: <br>
    <input type="text" name="email"><br>
    Password: <br>
    <input type="password" name="password"><br><br>
    <input type="submit" value="Register">
</form>
</div>

</body>
</html>

Program 7  advanced arrays
<!DOCTYPE html>
<html>
<head>
    <title>Employee Salary Details</title>
    <style>
        body { font-family: Arial, sans-serif; background: #f4f4f9; margin: 30px; }
        h1 { text-align: center; color: darkgreen; }
        table {
            width: 60%; margin: auto; border-collapse: collapse; background: white;
            box-shadow: 2px 2px 6px gray; border-radius: 8px; overflow: hidden;
        }
        th, td { padding: 12px; text-align: center; border: 1px solid #ccc; }
        th { background: darkgreen; color: white; }
        tr:nth-child(even) { background: #f9f9f9; }
    </style>
</head>
<body>

<h1>Employee Salary Details</h1>

<?php
// Employee data (ID, Name, Basic Salary, Bonus)
$employees = [
    ["id" => 101, "name" => "Rahul", "basic" => 30000, "bonus" => 5000],
    ["id" => 102, "name" => "Priya", "basic" => 40000, "bonus" => 7000],
    ["id" => 103, "name" => "Arjun", "basic" => 25000, "bonus" => 3000],
];

// Function to calculate total salary
function calculateTotalSalary($basic, $bonus) {
    return $basic + $bonus;
}

// Display employee salary details
echo "<table>";
echo "<tr><th>ID</th><th>Name</th><th>Basic Salary</th><th>Bonus</th><th>Total Salary</th></tr>";

foreach ($employees as $emp) {
    $total = calculateTotalSalary($emp["basic"], $emp["bonus"]);
    echo "<tr>";
    echo "<td>".$emp["id"]."</td>";
    echo "<td>".$emp["name"]."</td>";
    echo "<td>₹".$emp["basic"]."</td>";
    echo "<td>₹".$emp["bonus"]."</td>";
    echo "<td><b>₹".$total."</b></td>";
    echo "</tr>";
}

echo "</table>";
?>

</body>
</html>

Program 8  Exception handling

<!DOCTYPE html>
<html>
<head>
<title>Bank Transactions</title>
<style>
body{font-family:Arial;background:lightyellow;text-align:center;}
.box{background:#fff;padding:20px;margin:50px auto;width:350px;border-radius:10px;box-shadow:2px 2px 6px gray;}
.success{color:green;font-weight:bold;}
.error{color:red;font-weight:bold;}
</style>
</head>
<body>
<div class="box">
<h2>Bank Transactions</h2>
<form method="post">
    Acc No: <input type="text" name="accNo" required><br>
    Name: <input type="text" name="holderName" required><br>
    Initial Balance: <input type="number" name="balance" required><br>
    Type: <select name="type"><option value="deposit">Deposit</option><option value="withdraw">Withdraw</option></select><br>
    Amount: <input type="number" name="amount" required><br><br>
    <button type="submit" name="submit">Submit</button>
</form>

<?php
class BankAccount {
    public $accNo,$name,$balance;
    function __construct($a,$n,$b){$this->accNo=$a;$this->name=$n;$this->balance=$b;}
    function deposit($amt){ if($amt>0){$this->balance+=$amt;return "Deposited ₹$amt";} throw new Exception("Invalid Deposit!"); }
    function withdraw($amt){ if($amt>0 && $amt<=$this->balance){$this->balance-=$amt;return "Withdrawn ₹$amt";} throw new Exception("Insufficient Balance!"); }
}
if(isset($_POST['submit'])){
    $acc=new BankAccount($_POST['accNo'],$_POST['holderName'],$_POST['balance']);
    try{
        echo "<p class='success'>".($$_POST['type']=="deposit" ? $acc->deposit($_POST['amount']) : $acc->withdraw($_POST['amount']))."</p>";
        echo "<p>Final Balance: ₹{$acc->balance}</p>";
    }catch(Exception $e){ echo "<p class='error'>".$e->getMessage()."</p>"; }
}
?>
</div>
</body>
</html>


Program 9 server side validation 
<?php
session_start();
// Database connection
$servername = "localhost:3306";
$dbusername = "root";   // Database username
$dbpassword = "1234";   // Database password
$dbname     = "testdb1"; // Database name
$conn = new mysqli($servername, $dbusername, $dbpassword, $dbname);
// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
$error = "";
$success = "";
// Handle form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $username = $_POST['username'] ?? '';
    $password = $_POST['password'] ?? '';
    // Server-side validation
    if (empty($username) || empty($password)) {
        $error = "All fields are required!";
    } else {
        // Check credentials in database
        $sql = "SELECT * FROM users WHERE username='$username' AND password='$password'";
        $result = $conn->query($sql);
        if ($result->num_rows > 0) {
            $_SESSION['username'] = $username;
            // Redirect after successful login
            header("Location: ?welcome=1");
            exit();
        } else {
            $error = "Invalid Username or Password!";
        }
    }
}
// Handle logout
if (isset($_GET['logout'])) {
    session_destroy();
    header("Location: " . $_SERVER['PHP_SELF']);
    exit();
}
?>
<!DOCTYPE html>
<html>
<head>
    <title>Login System</title>
    <style>
        body { font-family: Arial; background: #f2f2f2; }
        .box { width: 300px; margin: 100px auto; padding: 20px; background: #fff; border-radius: 10px; box-shadow: 0 0 10px #aaa; }
        h2 { text-align: center; }
        input { width: 100%; padding: 10px; margin: 8px 0; }
        button { width: 100%; padding: 10px; background: #5cb85c; color: white; border: none; cursor: pointer; border-radius: 5px; }
        .error { color: red; text-align: center; }
        .success { color: green; text-align: center; }
    </style>
</head>
<body>
<div class="box">
<?php if (isset($_SESSION['username']) && isset($_GET['welcome'])): ?>
    <h2>Welcome, <?php echo $_SESSION['username']; ?> 🎉</h2>
    <p>You have successfully logged in.</p>
    <a href="?logout=1"><button>Logout</button></a>
<?php else: ?>
    <h2>Login</h2>
    <form method="POST" action="">
        <input type="text" name="username" placeholder="Username">
        <input type="password" name="password" placeholder="Password">
        <button type="submit">Login</button>
    </form>
    <div class="error"><?php echo $error; ?></div>
<?php endif; ?>
</div>
</body>
</html>
(Mysql)
-- Create Database
CREATE DATABASE testdb;

-- Use Database
USE testdb;
-- Create Table
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL
);
-- Insert Example Data
INSERT INTO users (name, email, password)
VALUES ('John Doe', 'john@example.com', '12345');


Program 10 shopping cart using session and cookies

<?php
session_start(); // start session

// Simple products
$products = [
    1 => ["name"=>"Laptop","price"=>50000],
    2 => ["name"=>"Phone","price"=>20000],
    3 => ["name"=>"Headphones","price"=>2000]
];

// Initialize cart from session or cookie
if(!isset($_SESSION['cart']) && isset($_COOKIE['cart'])){
    $_SESSION['cart'] = unserialize($_COOKIE['cart']);
}

// Add item
if(isset($_GET['add'])){
    $id = $_GET['add'];
    if(isset($_SESSION['cart'][$id])){
        $_SESSION['cart'][$id]['qty'] += 1;
    } else {
        $_SESSION['cart'][$id] = [
            "name"=>$products[$id]['name'],
            "price"=>$products[$id]['price'],
            "qty"=>1
        ];
    }
    setcookie("cart", serialize($_SESSION['cart']), time()+3600); // save in cookie 1 hr
}

// Remove item
if(isset($_GET['remove'])){
    $id = $_GET['remove'];
    unset($_SESSION['cart'][$id]);
    setcookie("cart", serialize($_SESSION['cart']), time()+3600);
}

// Clear cart
if(isset($_GET['clear'])){
    unset($_SESSION['cart']);
    setcookie("cart","",time()-3600);
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Simple Shopping Cart</title>
    <style>
        body{font-family:Arial; background:#f9f9f9; text-align:center;}
        .container{width:400px; margin:30px auto; padding:15px; background:white; border-radius:10px; box-shadow:1px 1px 5px gray;}
        table{width:100%; border-collapse:collapse; margin-bottom:10px;}
        th, td{padding:8px; border:1px solid #ccc;}
        th{background:#333; color:white;}
        a{color:blue; text-decoration:none;}
        a:hover{color:red;}
        button{padding:5px 10px; margin-top:5px; cursor:pointer;}
    </style>
</head>
<body>
<div class="container">
    <h2>Products</h2>
    <table>
        <tr><th>Name</th><th>Price</th><th>Action</th></tr>
        <?php foreach($products as $id=>$p): ?>
        <tr>
            <td><?php echo $p['name']; ?></td>
            <td>₹<?php echo $p['price']; ?></td>
            <td><a href="?add=<?php echo $id; ?>">Add</a></td>
        </tr>
        <?php endforeach; ?>
    </table>

    <h2>Cart</h2>
    <?php if(!empty($_SESSION['cart'])): ?>
    <table>
        <tr><th>Item</th><th>Price</th><th>Qty</th><th>Total</th><th>Action</th></tr>
        <?php
        $grandTotal=0;
        foreach($_SESSION['cart'] as $id=>$item):
            $total = $item['price'] * $item['qty'];
            $grandTotal += $total;
        ?>
        <tr>
            <td><?php echo $item['name']; ?></td>
            <td>₹<?php echo $item['price']; ?></td>
            <td><?php echo $item['qty']; ?></td>
            <td>₹<?php echo $total; ?></td>
            <td><a href="?remove=<?php echo $id; ?>">Remove</a></td>
        </tr>
        <?php endforeach; ?>
        <tr><th colspan="3">Grand Total</th><th>₹<?php echo $grandTotal; ?></th><th></th></tr>
    </table>
    <a href="?clear=1"><button>Clear Cart</button></a>
    <?php else: ?>
        <p>Your cart is empty.</p>
    <?php endif; ?>
</div>
</body>
</html>


Program 11 image uploading

<?php
$uploadDir = "uploads/";

// Create the folder automatically if it doesn't exist
if(!is_dir($uploadDir)){
    mkdir($uploadDir, 0777, true); // full permissions
}

// Handle image upload
if(isset($_POST['upload'])){
    $file = $_FILES['image'];
    $filename = $file['name'];
    $tmpName = $file['tmp_name'];
    $fileType = strtolower(pathinfo($filename, PATHINFO_EXTENSION));
    $allowed = ["jpg","jpeg","png","gif"];

    if(in_array($fileType, $allowed)){
        move_uploaded_file($tmpName, $uploadDir.$filename);
        $message = "Image uploaded successfully!";
    } else {
        $message = "Only JPG, JPEG, PNG, GIF files allowed!";
    }
}

// Handle image delete
if(isset($_GET['delete'])){
    $fileToDelete = $uploadDir.$_GET['delete'];
    if(file_exists($fileToDelete)){
        unlink($fileToDelete);
        $message = "Image deleted successfully!";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Image Upload</title>
    <style>
        body{font-family:Arial; text-align:center; background:#f9f9f9;}
        .container{margin:30px auto; width:500px; padding:15px; background:white; border-radius:10px; box-shadow:1px 1px 5px gray;}
        input, button{padding:8px; margin:10px 0;}
        img{width:100px; margin:5px; border:1px solid #ccc; border-radius:5px;}
        a{color:red; text-decoration:none;}
        a:hover{font-weight:bold;}
        .message{color:green;}
    </style>
</head>
<body>
<div class="container">
    <h2>Image Upload Application</h2>

    <?php if(isset($message)) echo "<p class='message'>$message</p>"; ?>

    <form method="post" enctype="multipart/form-data">
        <input type="file" name="image" required>
        <br>
        <button type="submit" name="upload">Upload</button>
    </form>

    <h3>Uploaded Images</h3>
    <?php
    $images = glob($uploadDir."*.*");
    if($images){
        foreach($images as $img){
            $imgName = basename($img);
            echo "<div style='display:inline-block; text-align:center;'>";
            echo "<img src='$img' alt='$imgName'><br>";
            echo "<a href='?delete=$imgName'>Delete</a>";
            echo "</div>";
        }
    } else {
        echo "<p>No images uploaded yet.</p>";
    }
    ?>
</div>
</body>
</html>


Program 12 student database using mysql and php
<?php
// Database connection
$host = "localhost";
$user = "root";
$pass = ""; // put your MySQL root password if set
$dbname = "library_db";

$conn = mysqli_connect($host, $user, $pass, $dbname);
if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

// Add a book
if (isset($_POST['add_book'])) {
    $title = $_POST['title'];
    $author = $_POST['author'];
    $sql = "INSERT INTO books (title, author) VALUES ('$title', '$author')";
    mysqli_query($conn, $sql);
    echo "<p style='color:green;'>Book added successfully!</p>";
}

// Issue a book
if (isset($_POST['issue_book'])) {
    $user_id = $_POST['user_id'];
    $book_id = $_POST['book_id'];

    $check = mysqli_query($conn, "SELECT available FROM books WHERE id=$book_id");
    $row = mysqli_fetch_assoc($check);

    if ($row && $row['available']) {
        mysqli_query($conn, "INSERT INTO issued_books (user_id, book_id, issue_date) 
                             VALUES ('$user_id', '$book_id', NOW())");
        mysqli_query($conn, "UPDATE books SET available=0 WHERE id=$book_id");
        echo "<p style='color:green;'>Book issued successfully!</p>";
    } else {
        echo "<p style='color:red;'>Book is not available!</p>";
    }
}

// Return a book
if (isset($_POST['return_book'])) {
    $book_id = $_POST['book_id'];
    mysqli_query($conn, "UPDATE issued_books SET return_date=NOW() 
                         WHERE book_id=$book_id AND return_date IS NULL");
    mysqli_query($conn, "UPDATE books SET available=1 WHERE id=$book_id");
    echo "<p style='color:blue;'>Book returned successfully!</p>";
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Library Management</title>
</head>
<body>
    <h1>📚 Library Management System</h1>

    <!-- Add Book -->
    <h3>Add a New Book</h3>
    <form method="POST">
        <input type="text" name="title" placeholder="Book Title" required>
        <input type="text" name="author" placeholder="Author" required>
        <button type="submit" name="add_book">Add Book</button>
    </form>
    <hr>

    <!-- Issue Book -->
    <h3>Issue a Book</h3>
    <form method="POST">
        <input type="number" name="user_id" placeholder="User ID" required>
        <input type="number" name="book_id" placeholder="Book ID" required>
        <button type="submit" name="issue_book">Issue Book</button>
    </form>
    <hr>

    <!-- Return Book -->
    <h3>Return a Book</h3>
    <form method="POST">
        <input type="number" name="book_id" placeholder="Book ID" required>
        <button type="submit" name="return_book">Return Book</button>
    </form>
    <hr>

    <!-- View Books -->
    <h3>All Books</h3>
    <?php
    $result = mysqli_query($conn, "SELECT * FROM books");
    echo "<table border='1' cellpadding='5'>
          <tr><th>ID</th><th>Title</th><th>Author</th><th>Status</th></tr>";
    while ($row = mysqli_fetch_assoc($result)) {
        echo "<tr>
            <td>".$row['id']."</td>
            <td>".$row['title']."</td>
            <td>".$row['author']."</td>
            <td>".($row['available'] ? "Available" : "Issued")."</td>
        </tr>";
    }
    echo "</table>";
    ?>
</body>
</html>


Program 13 library management mysql functions
<?php
// Database Connection
$host = "localhost:3307";
$user = "root";   // your MySQL username
$pass = "";       // your MySQL password
$db   = "library_db";

$conn = mysqli_connect($host, $user, $pass, $db);

if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

// Create Table if not exists
$createTable = "CREATE TABLE IF NOT EXISTS books (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    author VARCHAR(100) NOT NULL,
    year INT NOT NULL
)";
mysqli_query($conn, $createTable);

// Insert Book
if (isset($_POST['add'])) {
    $title = $_POST['title'];
    $author = $_POST['author'];
    $year = $_POST['year'];

    $sql = "INSERT INTO books (title, author, year) VALUES ('$title', '$author', '$year')";
    if (mysqli_query($conn, $sql)) {
        echo "<p style='color:green'>Book Added Successfully!</p>";
    } else {
        echo "Error: " . mysqli_error($conn);
    }
}

// Delete Book
if (isset($_GET['delete'])) {
    $id = $_GET['delete'];
    $delSql = "DELETE FROM books WHERE id=$id";
    mysqli_query($conn, $delSql);
    echo "<p style='color:red'>Book Deleted!</p>";
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Library Management</title>
    <style>
        body { font-family: Arial; margin: 40px; background: #f4f4f9; }
        h2 { color: #333; }
        form { margin-bottom: 20px; }
        input, button { padding: 8px; margin: 5px; }
        table { border-collapse: collapse; width: 70%; margin-top: 20px; }
        th, td { border: 1px solid #ccc; padding: 8px; text-align: center; }
        th { background: #eee; }
        a { text-decoration: none; color: red; }
    </style>
</head>
<body>

<h2>Library Management System</h2>

<form method="POST">
    <input type="text" name="title" placeholder="Book Title" required>
    <input type="text" name="author" placeholder="Author" required>
    <input type="number" name="year" placeholder="Year" required>
    <button type="submit" name="add">Add Book</button>
</form>

<h3>Book List</h3>
<table>
    <tr>
        <th>ID</th>
        <th>Title</th>
        <th>Author</th>
        <th>Year</th>
        <th>Action</th>
    </tr>
    <?php
    $result = mysqli_query($conn, "SELECT * FROM books");
    while ($row = mysqli_fetch_assoc($result)) {
        echo "<tr>
            <td>".$row['id']."</td>
            <td>".$row['title']."</td>
            <td>".$row['author']."</td>
            <td>".$row['year']."</td>
            <td><a href='?delete=".$row['id']."' onclick=\"return confirm('Delete this book?');\">Delete</a></td>
        </tr>";
    }
    ?>
</table>

</body>
</html>






